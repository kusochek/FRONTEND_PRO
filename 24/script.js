// RENDER EXIST USERS

// const controller = (action) => fetch(action).then((response) => response.json());

// controller('json/users.json')
// 	.then((data) => {
// 		Promise.allSettled(data.users.map((user) => controller(`json/${user.name.toLowerCase()}.json`)))
// 			.then((data) => data.filter((promise) => promise.status === 'fulfilled').map((promise) => promise.value))
// 			.then((data) => {
// 				data.forEach((user) => {
// 					document.body.innerHTML += `<ul><li>User name: ${user.name}</li><li>AVATAR: ${user.avatar}</li></ul>`;
// 				})
// 			});
// 	})
// 	.catch((err) => console.log(err));


// async/await
// try catch

// async function controller(action) {
// 	const response = await fetch(action);
// 	const data = await response.json();

// 	return data;
// }

// async function getUser() {
// 	const data = await controller('json/users.json');

// 	data.users.forEach((user) => console.log(user.email));
// }

// getUser();

// EXAMPLE 1
// FIND USER BY EMAIL AND RENDER HIM

// async function controller(action) {
// 	try {
// 		const response = await fetch(action);

// 		if (response.status > 399) {
// 			throw new Error(response.statusText);
// 		}
// 		const data = await response.json();	
// 		return data;
// 	} catch (err) {
// 		console.log(err);
// 	}
// }

// const button = document.querySelector('#button');

// button.addEventListener('click', async () => {
// 	const email = document.querySelector('#email').value;

// 	try {
// 		const users = await controller('json/users.json');
// 		const foundUser = users.users.find((user) => user.email === email.toLowerCase());
		
// 		const user = await controller(`json/${foundUser.name.toLowerCase()}.json`);
// 		const avatar = document.createElement('p');
// 		const name = document.createElement('p');
	
// 		avatar.innerText = user.avatar;
// 		name.innerText = user.name;
	
// 		document.body.append(avatar, name);
// 	} catch (err) {
// 		console.log(err);
// 	} finally {
// 		renderSomething();
// 	};
// });

// function renderSomething() {
// 	console.log(1,2,3,4,5);
// }


// REST

// API: https://jsonplaceholder.typicode.com/

// 'https://jsonplaceholder.typicode.com/comments?userId=1'

// URL
// 	protocol http/https
// 	domain
// 	path
// 	queryParameter

// METHOD
// 	GET ‚Äì –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
// 	POST * ‚Äì –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞ (body)
// 	PUT * ‚Äì –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞)
// 	PATCH * ‚Äì –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞
// 	DELETE

// BODY

// HEADERS ‚Äì —Å–ª—É–∂–µ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–∫–æ–¥–∏—Ä–æ–≤–∫–∞, —Å–∂–∞—Ç–∏–µ, —Å–µ—Ä–≤–µ—Ä, –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ)

// STATUS
// 	100
// 		101

// 	200
// 		201
// 		204

// 	300
// 		301
// 		302

// 	400 ‚Äì –æ—à–∏–±–∫–∞ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ
// 		401
// 		403
// 		404

// 	500 ‚Äì –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
// 		502
// 		503

// https://jsonplaceholder.typicode.com/

// REST ‚Äì –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∫–ª–∏–µ–Ω—Ç-—Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
// —Å–≤–æ–¥ –ø—Ä–∞–≤–∏–ª (—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π), –ø–æ –∫–æ—Ç–æ—Ä—ã–º –∫–ª–∏–µ–Ω—Ç (web app, mobile app) –∏ —Å–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–Ω—ã –º–µ–∂–¥—É —Å–æ–±–æ–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å

// REST –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –Ω—É–∂–Ω–æ –¥—É–º–∞—Ç—å –æ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∫–∞–∫ –æ —Ä–µ—Å—É—Ä—Å–µ.
// –£ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –µ—Å—Ç—å —Å–≤–æ–π URL. 

// LIST ‚Äì GET /posts // ‚Äì –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ—Å—É—Ä—Å posts
// ITEM ‚Äì GET /posts/:id // ‚Äì –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ—Å—É—Ä—Å posts —Å :id

// ADD ‚Äì POST /posts     body:{name: Alex, age: 21} // ‚Äì –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ—Å—É—Ä—Å posts c —Ç–µ–ª–æ–º –∑–∞–ø—Ä–æ—Å–∞, id –≤—Å–µ–≥–¥–∞ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–µ—Ä–≤–µ—Ä
// <== {id: 101, name: Alex, age: 21}

// FULL UPDATE ‚Äì PUT /posts/:id  body:{id: 101, name: Ivan} // –≤ body –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤—Å–µ –ø–æ–ª—è –æ–±—ä–µ–∫—Ç–∞
// <== {id: 101, name: Ivan}

// PARTIAL UPDATE ‚Äì PATCH /posts/:id body:{name: ''} // –≤ body –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
// <== {id: 101, name: Eve, age: 21}

// DELETE ‚Äì /posts/:id
// <== {}

// RESTfull Api ‚Äì —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—å –≤ –≤–∞–∫—É—É–º–µ üòå

const API = "https://jsonplaceholder.typicode.com";

async function controller(action, method, body) {
	const headers = {
		'Content-type': 'application/json; charset=UTF-8',
	};

	const params = {
		method: method,
		headers,
	};

	if (body) params.body = JSON.stringify(body);

	try {
		const response = await fetch(action, params);
		const data = await response.json();	

		return data;
	} catch (err) {
		console.log(err);
	}
}

async function getPosts() {
	const posts = await controller(`${API}/posts`, 'GET');
	console.log(posts);
}

getPosts();

async function createPost() {
	const params = {
		title: 'foo',
    body: 'bar',
    userId: 1,
	};
	const updatedPosts = await controller(`${API}/posts`, 'POST', params);
	console.log(updatedPosts);
}

const createButton = document.querySelector('#create');

createButton.addEventListener('click', createPost);

async function updatePost() {
	const params = {
		id: 10,
    body: 'bar',
		title: "et ea vero quia laudantium autem",
		userId: 2,
	};
	const updatedPosts = await controller(`${API}/posts/10`, 'PUT', params);
	console.log(updatedPosts);
}

const updateButton = document.querySelector('#update');

updateButton.addEventListener('click', updatePost);